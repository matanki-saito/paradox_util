JSON_text
  = mem:member* { return mem; }

begin_object    = ws "{" ws
end_object      = ws "}" ws
name_separator  = ws "=" ws/
				  ws "<" ws/
                  ws ">" ws
                  ws ">=" ws
                  ws "<=" ws
value_separator = ws "" ws

ws "whitespace" = ([ \t\n\r] / comment)* 

// ----- 3. Values -----

value
  = object
  / member

false = "false" { return false; }
null  = "null"  { return null;  }
true  = "true"  { return true;  }

// ----- 4. Objects -----

object
  = begin_object
    members:(
      head:member
      tail:(value_separator m:member { return m; })*
      {
        var result = [];

        [head].concat(tail).forEach(function(element) {
          result.push({key:element.key,value:element.value,ope:element.ope});
        });

        return result;
      }
    )?
    end_object
    { return members !== null ? members: {}; }

member
  =
  key:key sep:name_separator val:value ws {
      return {key:key,value:val,ope:sep[1]};
    }

  / val:object ws {
  	return {key:'anonymous', value:val, ope: null }
  }
  
  / keyOnly:primitive ws {
  	return {key:keyOnly,value:null, ope: null};
  } 

// ----- 6. Numbers -----

number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point
  = "."

digit1_9
  = [1-9]

e
  = [eE]

exp
  = e (minus / plus)? DIGIT+

frac
  = decimal_point DIGIT+

int
  = zero / (digit1_9 DIGIT*)

minus
  = "-"

no
 = "no"
 
yes
 = "yes"

plus
  = "+"

zero
  = "0"
  
ID
  = text:[@\.\-A-zÀ-ÿœšŸŠŒŽž’'0-9_]+ { return text.join(""); }

comment
  = "#" [^\n]* "\n"

// ----- 7. Strings -----

string "string"
  = quotation_mark chars:char* quotation_mark { return chars.join(""); }

key
 = k:[@\.\-A-zÀ-ÿœšŸŠŒŽž’'0-9_]* { return k.join(""); }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape
  = "\\"

quotation_mark
  = '"'

primitive
  = false
  / null
  / true
  / ID
  / number
  / no
  / yes
  / string

unescaped
  = [^\0-\x1F\x22\x5C]

// ----- Core ABNF Rules -----

// See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4234).
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i
